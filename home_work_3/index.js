// **Задание №1. Дайте ответ, что будет в результате выполнения
// данных ниже примеров. С объяснением, почему это так.**

// 1. "кот" > "код" //true т.к. при посимвольном сравнении в соответствии с таблицей юникода 0442(т) > 0434(д)

// 2. "2" + 2 * "2" //"24" т.к. в соответствии с приоритетами сначала
// выполняется умножение (операнды приводятся к числу)получаем "2" + 4,
// далее т.к. один из операндов строка происходит конкатенация, т.е. получаем "24"

// 3. undefined == null //true т.к. при не строгом сравнении undefined равняется null

// 4. undefined != null //false т.к. undefined равняется null

// 5. null == 0 // false т.к. null при не строгом равенстве равняется только undefined и null

// 6. 2 > "3" // false т.к. при использовании операторов сравнения операнды преобразуются к числу и
// далее сравниваются полученные значения

// 7. null - false + true //1 т.к. на первом шаге используется мат. операция вычитания, операнды
// преобразуются к числу, получаем 0 - 0 = 0 и на втором шаге операция сложение с преобразование true к числу,
//получаем 0 + 1 = 1

// 8. 1 / "l" //NaN т.к. при преобразовании строки "l" к числу получаем NaN

// 9. "2" * "3" //6 т.к. оба операнда преобразуются к числу и получаем 2 * 3 = 6

// 10. 4 + 5 + "O" //"90" т.к. при выполнении первой мат. операции сложения получаем 9, а при второй получаем конкатенацию
//числа и строки

// 11. "l" + 4 + 5 //"l45" т.к. при выполнении первой операции сложения выполняется конкатенации строки и числа, получаем

//"l4" и затем при выполнении второй операции сложения выполняется конкатенация строки "l4" и 5

// 12. "4" - 2 //2 т.к.при мат. операции вычитания строка "4" преобразуется в число 4 и получаем 4 - 2 = 2

// 13. "4" - "4x" //NaN т.к. при мат. операции вычитания "4x" преобразуется в NaN и в итого 4 - NaN = NaN

// 14. "23" == 23 //true т.к. при не строгом равенстве не учитываются типы операндов, операнды преобразуются в числа и
//получаем 23 == 23

// 15. null == false //false т.к. null при не строгом равенстве равен только себе и undefined

// 16. " -4 "/ 0 + 1 //-Infinity т.к. при мат. операции деления строка " -4 " преобразуется в число -4 (пустые символы
//справа и слева обрезаются) получаем -4/0 = -Infinity и затем -Infinity + 1 = -Infinity

// 17. null + 1 //1 т.к. при мат. операции сложения null преобразуется в 0, т.е. 0 + 1 = 1

// 18. undefined + null //NaN т.к. при мат. операции сложения операнды преобразуются в число, undefined преобразуется в

// NaN т.е. в итоге NaN + 0 = NaN

// 19. 1 === "1" //false т.к. при строгом равенстве на первом этапе проверяются типы, тип string !== тип number

// 20. "2" > 10 //false т.к. при операции сравнения операнды преобразуются в число т.е. 2 > 10

// 21. NaN == undefined //false т.к. NaN не может равняться ничему, даже самому себе и undefined при не строгом равентве
// может равняться только самому себе и null

// **Задание №2. Что будет выведено в консоль и почему?​**
// 1. console.log("5" + 3); //"53" т.к. при мат. операции сложения с участием строки происходит конкатенация строки и числа
// 2. console.log("10" - 2); //8 т.к. при мат. операции вычитания "10" преобразуется в число, получается 10 - 2 = 8
// 3. console.log("5" * 3); //15 т.к. при мат. операции умножения "5" преобразуется в число, получается 5 * 3 = 15
// 4. console.log("20" / 4); //5 т.к. при мат. операции деления "20" преобразуется в число, получается 20 / 4 = 5
// 5. console.log("17" % 5); //2 т.к. при мат. операции взятия остака от деления "17" преобразуется в число, получается 17 % 5 = 2
// 6. console.log([1, 2] + 3); //1,23 т.к. при мат. операции сложения массив [1, 2] приводится к строке, получается "1,2"
//и затем конкатенация "1,2" + 3 = "1,23"
// 7. console.log("2" ** 3); //8 т.к. при мат. операции возведения в степень "2" преобразуется в число, получается 2 ** 3 = 8
// 8. console.log(+true); //1 т.к. унарный плюс преобразует к числу true, получаем 1
// 9. console.log(+false); //0 т.к. унарный плюч преобразует к числу false, получаем 0
console.log(Number([10, 2]));

// 10. console.log(null + 5); //5 т.к. при мат. операции сложения null преобразуется в число 0, получается 0 + 5 = 5
// 11. console.log(undefined + 5); //NaN т.к. при мат. операции сложения undefined преобразуется в NaN, получается  NaN + 5 = NaN
// 12. console.log("" + 5); //"5" т.к. при мат. операции сложения со строкой происходит конкатенация строки и числа
// 13. console.log("" - 5); //-5 т.к. при мат. операции вычитания строка "" преобразуется в число 0, получается 0 - 5 = -5
// 14. console.log("" * 5); //0 т.к. при мат. операции умножения строка "" преобразуется в число 0, получается 0 * 5 = 0
// 15. console.log([10] - 3); //7 т.к. при мат. операции вычитания массив [10] преобразуется в число, получается 10 - 3 = 7
// 16. console.log([1, 2] - 3); //NaN т.к. при мат. операции вычитания массив [1, 2] не может быть преобразован к числу, получается NaN - 3 = NaN
// 17. console.log({} + 1); //[object Object]1 т.к. при мат. операции сложения {} преобразуется в строку "[object Object]",
//получается "[object Object]" + 1 = "[object Object]1"
// 18. console.log("10" + 5 - 2);//103 т.к. при первой мат. операции сложения происходит конкатениция строки и числа "105", при второй
// мат. операции вычитания строка "105" преобразуется в число 105, получается 105 - 2 = 103
// 19. console.log("10" - 2 + 3);//11 т.к. при первой мат. операции вычитания строка "10" преобразуется в число 10, вторая мат. операция
//сложения  получается 8 + 3 = 11
